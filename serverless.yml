# Cesra Auris saga

service: examen-starwars
custom:
  #El  nombre de la tabla
  tableName: 'people-table-${self:provider.stage}'
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  #-region y estado
  stage: dev
  region: us-east-1
  #Aqui para  DynamoDB
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:Query'        #consultas
            - 'dynamodb:Scan'         #scan tablas
            - 'dynamodb:GetItem'      #obtener
            - 'dynamodb:PutItem'      #Actualizar  item
            - 'dynamodb:UpdateItem'   #update  iten
            - 'dynamodb:DeleteItem'   #delete
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PEOPLE_TABLE}"
#  iamRoleStatements:
#    - Effect: Allow
#      Action:
#        - dynamodb:Query        #consultas
#        - dynamodb:Scan         #scan tablas
#        - dynamodb:GetItem      #obtener
#        - dynamodb:PutItem      #Actualizar  item
#        - dynamodb:UpdateItem   #update  iten
#        - dynamodb:DeleteItem   #dlete
#      Resource:
#        - { "Fn::GetAtt": [ "PeopleDynamoDBTable", "Arn" ] }
#      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PEOPLE_TABLE}"
#  #  #VAriables de Entorno
  environment:
    PEOPLE_TABLE: ${self:custom.tableName}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# Estoy  excluyendo para q el paquete  pese  menos
#package:
#  exclude:
#    - '.idea/**'
#    - 'package-lock.json'
#    #- 'node_modules/**'
#    - 'node_modules/serverless-offline/**'
#    # - 'node_modules/serverless-dynamodb-local/**'
#    - 'node_modules/aws-sdk/**'

functions:
  getPeopleAll:
    handler: src/peopleGetAll.init
    events:
      - http:
          path: /people
          method: get

  getPeople:
    handler: src/peopleGetItem.init
    events:
      - http:
          path: /people/{id}
          method: get
#----------------------------------- dynamo
  createPeopleDyna:
    handler: src/peopleCreateItemDyna.init
    events:
      - http:
          path: /people-dyna
          method: post

  peopleGetAllItemDyna:
    handler: src/peopleGetAllItemDyna.init
    events:
      - http:
          path: /people-dyna
          method: get

  getPeopleDyna:
    handler: src/peopleGetItemDyna.init
    events:
      - http:
          path: /people-dyna/{id}
          method: get


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#-------Recursos----------
resources:
  Resources:
    PeopleDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      #propiedades de la  tabla
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S #string type
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:

# - serverless-offline

